{"ast":null,"code":"var _jsxFileName = \"C:\\\\kdt-venture\\\\myreact\\\\src\\\\BoardList.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BoardHeading extends React.Component {\n  //테이블 제목행 - 번호 제목 작성자\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"\\uBC88\\uD638\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 8,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"\\uC81C\\uBAA9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 8,\n          columnNumber: 32\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"\\uC791\\uC131\\uC790\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 8,\n          columnNumber: 43\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          colSpan: 2,\n          children: \"\\uCD94\\uAC00\\uB3D9\\uC791\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 8,\n          columnNumber: 55\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass BoardRow extends React.Component {\n  //게시물 갯수만큼 테이블 행 구성\n  render() {\n    //화살표 함수 : 자신을 포함한 클랙스 객체를 this로 여김\n    //일반 함수 : this = 이벤트 발생객체\n    const deleteBoard = event => {\n      //alert(\"삭제\");\n      //삭제버튼 클릭한 게시물의 번호 받아서 (this.props.deleteBoard()) 호출 전달\n      this.props.deleteBoard(event.target.id);\n    };\n\n    const updateBoard = event => {\n      //alert(\"수정\");\n      //수정버튼 클릭한 게시물의 번호 받아서 전달\n      const oneBoard = {\n        seq: event.target.id,\n        title: \"수정제목\",\n        writer: \"수정작성자\"\n      };\n      this.props.updateBoard(oneBoard);\n    };\n\n    const tr_tag = this.props.board.map(function (one) {\n      //반복하면서 계속 리턴할 문장\n      return /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: one.seq\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: one.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 39\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: one.writer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 59\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            id: one.seq,\n            onClick: updateBoard,\n            children: \"\\uC218\\uC815\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            id: one.seq,\n            onClick: deleteBoard,\n            children: \"\\uC0AD\\uC81C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this)]\n      }, one.seq, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this);\n    }); //반복문이 종료 된 이후 최종적으로 리턴할 문장\n\n    return /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: tr_tag\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nclass BoardWriteForm extends React.Component {\n  //props.addBoard 함수를 전달 받은 상태\n  render() {\n    //글쓰기 버튼 클릭하면 게시물 번호를 현재 게시물 갯수 +1 생성하여 alert로 제목, 작성자, 글번호 띄우기\n    const oneboard = {\n      seq: 0,\n      title: \"\",\n      writer: \"\"\n    };\n\n    const change = event => {\n      //if(event.target.id === \"title\") oneboard.title = event.target.value;\n      //if(event.target.id === \"writer\") oneboard.writer = event.target.value;\n      oneboard[event.target.id] = event.target.value;\n    };\n\n    const finalChange = () => {\n      oneboard.seq = this.props.board.length + 1;\n      alert(oneboard.seq + \" : \" + oneboard.title + \" : \" + oneboard.writer);\n      this.props.addBoard(oneboard);\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\uAC8C\\uC2DC\\uBB3C \\uC81C\\uBAA9 : \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"title\",\n        onChange: change\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 26\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 76\n      }, this), \"\\uAC8C\\uC2DC\\uBB3C \\uC791\\uC131\\uC790 : \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"writer\",\n        onChange: change\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 27\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"btn\",\n        onClick: finalChange,\n        children: \"\\uAE00\\uC4F0\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this);\n  }\n\n} //지역변수로 board 선언\n\n/* class BoardList extends React.Component{\r\n    render(){\r\n        const board = [\r\n            {seq:1, title:\"제목1\", writer:\"작성자1\"},\r\n            {seq:2, title:\"제목2\", writer:\"작성자2\"},\r\n            {seq:3, title:\"제목3\", writer:\"작성자3\"},\r\n            {seq:4, title:\"제목4\", writer:\"작성자4\"},\r\n            {seq:5, title:\"제목5\", writer:\"작성자5\"}\r\n        ];\r\n\r\n        return (<div><table><BoardHeading /><BoardRow board={board} />\r\n        </table><hr /><BoardWriteForm board={board} /></div>);\r\n    }\r\n} */\n// class BoardList extends React.Component{\n\n/*         board = [\r\n            {seq:1, title:\"제목1\", writer:\"작성자1\"},\r\n            {seq:2, title:\"제목2\", writer:\"작성자2\"},\r\n            {seq:3, title:\"제목3\", writer:\"작성자3\"},\r\n            {seq:4, title:\"제목4\", writer:\"작성자4\"},\r\n            {seq:5, title:\"제목5\", writer:\"작성자5\"}\r\n        ];\r\n\r\n        //BOARD 1개 게시물 추가 메소드 정의\r\n        add=() => {\r\n            this.board.push({seq:6, title:\"제목6\", writer:\"작성자6\"});\r\n            console.log(this.board.length);\r\n        }\r\n\r\n    //화면 구성 1번 호출\r\n    render(){\r\n\r\n        return (<div><table><BoardHeading /><BoardRow board={this.board} />\r\n        </table><hr /><button onClick={this.add}>글추가</button>\r\n        <BoardWriteForm board={this.board} />\r\n        </div>);\r\n    }\r\n} */\n//state 사용 -> state 지정 변수값 변경 시마다 render 재호출\n\n/* class BoardList extends React.Component{\r\n    //1. state 변수 선언\r\n    state ={\r\n        board : [\r\n        {seq:1, title:\"제목1\", writer:\"작성자1\"},\r\n        {seq:2, title:\"제목2\", writer:\"작성자2\"},\r\n        {seq:3, title:\"제목3\", writer:\"작성자3\"},\r\n        {seq:4, title:\"제목4\", writer:\"작성자4\"},\r\n        {seq:5, title:\"제목5\", writer:\"작성자5\"}\r\n        ]\r\n    };\r\n    \r\n\r\n    //BOARD 1개 게시물 추가 메소드 정의\r\n    //3. state 내부 변수 stter - this.setState 메소드 호출 - 스프레드연산자\r\n    add=() => {\r\n        //this.board.push({seq:6, title:\"제목6\", writer:\"작성자6\"});\r\n\r\n        const copyBoard = [...this.state.board, {seq:this.state.board.length +1, title:\"제목\", writer:\"작성자\"}];\r\n        //...은 카피본을 만드는 스프레드 연산자\r\n        // -> 기존 데이터 가져오고 , 뒤에 추가할 데이터\r\n        this.setState({board : copyBoard});\r\n        \r\n        console.log(this.state.board.length);\r\n    }\r\n\r\n    //화면 구성 1번 호출\r\n    //2. state 사용\r\n    render(){\r\n\r\n        return (<div><table><BoardHeading /><BoardRow board={this.state.board} />\r\n        </table><hr /><button onClick={this.add}>글추가</button>\r\n        <BoardWriteForm board={this.state.board} />\r\n        </div>);\r\n    }\r\n} */\n\n\nclass BoardList extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      board: [{\n        seq: 1,\n        title: \"제목1\",\n        writer: \"작성자1\"\n      }, {\n        seq: 2,\n        title: \"제목2\",\n        writer: \"작성자2\"\n      }, {\n        seq: 3,\n        title: \"제목3\",\n        writer: \"작성자3\"\n      }, {\n        seq: 4,\n        title: \"제목4\",\n        writer: \"작성자4\"\n      }, {\n        seq: 5,\n        title: \"제목5\",\n        writer: \"작성자5\"\n      }]\n    };\n\n    this.addBoard = newBoard => {\n      const copyBoard = [...this.state.board, newBoard];\n      this.setState({\n        board: copyBoard\n      });\n      console.log(this.state.board.length);\n    };\n\n    this.deleteBoard = seq => {\n      //보드 배열에서 해당 게시물 삭제\n      this.setState({\n        board: this.state.board.filter(function (one) {\n          return one.seq != seq;\n        })\n      }); //삭제한것만 빼고 가져와\n    };\n\n    this.updateBoard = oneBoard => {\n      //board 배열에서 oneBoard.seq와 같은 데이터 찾아서 수정\n      this.setState({\n        board: this.state.board.map(one => {\n          one.seq == oneBoard.seq ? { ...this.state.board,\n            title: oneBoard.title,\n            writer: oneBoard.writer\n          } : one;\n        })\n      });\n    };\n  }\n\n  //화면 구성 1번 호출\n  //2. state 사용\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(BoardHeading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(BoardRow, {\n          board: this.state.board,\n          deleteBoard: this.deleteBoard,\n          updateBoard: this.updateBoard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(BoardWriteForm, {\n        board: this.state.board,\n        addBoard: this.addBoard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default BoardList;","map":{"version":3,"names":["React","BoardHeading","Component","render","BoardRow","deleteBoard","event","props","target","id","updateBoard","oneBoard","seq","title","writer","tr_tag","board","map","one","BoardWriteForm","oneboard","change","value","finalChange","length","alert","addBoard","BoardList","state","newBoard","copyBoard","setState","console","log","filter"],"sources":["C:/kdt-venture/myreact/src/BoardList.js"],"sourcesContent":["import React from \"react\";\r\n\r\nclass BoardHeading extends React.Component{\r\n    //테이블 제목행 - 번호 제목 작성자\r\n    render(){\r\n       return(\r\n            <thead>\r\n                <tr><th>번호</th><th>제목</th><th>작성자</th><th colSpan={2}>추가동작</th></tr>\r\n            </thead>\r\n        );\r\n    }\r\n}\r\n\r\nclass BoardRow extends React.Component{\r\n    //게시물 갯수만큼 테이블 행 구성\r\n    render(){\r\n        //화살표 함수 : 자신을 포함한 클랙스 객체를 this로 여김\r\n        //일반 함수 : this = 이벤트 발생객체\r\n        const deleteBoard = (event) => {\r\n            //alert(\"삭제\");\r\n            //삭제버튼 클릭한 게시물의 번호 받아서 (this.props.deleteBoard()) 호출 전달\r\n\r\n            this.props.deleteBoard(event.target.id);\r\n\r\n        }\r\n\r\n        const updateBoard = (event) => {\r\n            //alert(\"수정\");\r\n            //수정버튼 클릭한 게시물의 번호 받아서 전달\r\n            const oneBoard = {seq : event.target.id, title:\"수정제목\", writer:\"수정작성자\"};\r\n            this.props.updateBoard(oneBoard);\r\n        }\r\n\r\n        const tr_tag = this.props.board.map(function(one){\r\n            //반복하면서 계속 리턴할 문장\r\n            return (\r\n                <tr key={one.seq}>\r\n                    <td>{one.seq}</td><td>{one.title}</td><td>{one.writer}</td>\r\n                    <td><button id={one.seq} onClick={updateBoard}>수정</button></td>\r\n                    <td><button id={one.seq} onClick={deleteBoard}>삭제</button></td>\r\n                </tr>\r\n            );\r\n        });\r\n\r\n        //반복문이 종료 된 이후 최종적으로 리턴할 문장\r\n        return (<tbody>{tr_tag}</tbody>);\r\n    }\r\n}\r\n\r\nclass BoardWriteForm extends React.Component{\r\n    //props.addBoard 함수를 전달 받은 상태\r\n    render(){\r\n        //글쓰기 버튼 클릭하면 게시물 번호를 현재 게시물 갯수 +1 생성하여 alert로 제목, 작성자, 글번호 띄우기\r\n        const oneboard = {seq : 0, title:\"\", writer:\"\"};\r\n        \r\n        const change = (event) => {\r\n            //if(event.target.id === \"title\") oneboard.title = event.target.value;\r\n            //if(event.target.id === \"writer\") oneboard.writer = event.target.value;\r\n            oneboard[event.target.id] = event.target.value;\r\n        }\r\n\r\n        const finalChange = () => {\r\n            oneboard.seq = this.props.board.length +1;\r\n            alert(oneboard.seq + \" : \" + oneboard.title + \" : \" + oneboard.writer);\r\n            this.props.addBoard(oneboard);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                게시물 제목 : <input type=\"text\" id=\"title\" onChange={change}/> <br/>\r\n                게시물 작성자 : <input type=\"text\" id=\"writer\" onChange={change}/> <br/>\r\n                <button id=\"btn\" onClick={finalChange} >글쓰기</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n//지역변수로 board 선언\r\n/* class BoardList extends React.Component{\r\n    render(){\r\n        const board = [\r\n            {seq:1, title:\"제목1\", writer:\"작성자1\"},\r\n            {seq:2, title:\"제목2\", writer:\"작성자2\"},\r\n            {seq:3, title:\"제목3\", writer:\"작성자3\"},\r\n            {seq:4, title:\"제목4\", writer:\"작성자4\"},\r\n            {seq:5, title:\"제목5\", writer:\"작성자5\"}\r\n        ];\r\n\r\n        return (<div><table><BoardHeading /><BoardRow board={board} />\r\n        </table><hr /><BoardWriteForm board={board} /></div>);\r\n    }\r\n} */\r\n\r\n\r\n\r\n\r\n// class BoardList extends React.Component{\r\n/*         board = [\r\n            {seq:1, title:\"제목1\", writer:\"작성자1\"},\r\n            {seq:2, title:\"제목2\", writer:\"작성자2\"},\r\n            {seq:3, title:\"제목3\", writer:\"작성자3\"},\r\n            {seq:4, title:\"제목4\", writer:\"작성자4\"},\r\n            {seq:5, title:\"제목5\", writer:\"작성자5\"}\r\n        ];\r\n\r\n        //BOARD 1개 게시물 추가 메소드 정의\r\n        add=() => {\r\n            this.board.push({seq:6, title:\"제목6\", writer:\"작성자6\"});\r\n            console.log(this.board.length);\r\n        }\r\n\r\n    //화면 구성 1번 호출\r\n    render(){\r\n\r\n        return (<div><table><BoardHeading /><BoardRow board={this.board} />\r\n        </table><hr /><button onClick={this.add}>글추가</button>\r\n        <BoardWriteForm board={this.board} />\r\n        </div>);\r\n    }\r\n} */\r\n\r\n\r\n\r\n\r\n//state 사용 -> state 지정 변수값 변경 시마다 render 재호출\r\n/* class BoardList extends React.Component{\r\n    //1. state 변수 선언\r\n    state ={\r\n        board : [\r\n        {seq:1, title:\"제목1\", writer:\"작성자1\"},\r\n        {seq:2, title:\"제목2\", writer:\"작성자2\"},\r\n        {seq:3, title:\"제목3\", writer:\"작성자3\"},\r\n        {seq:4, title:\"제목4\", writer:\"작성자4\"},\r\n        {seq:5, title:\"제목5\", writer:\"작성자5\"}\r\n        ]\r\n    };\r\n    \r\n\r\n    //BOARD 1개 게시물 추가 메소드 정의\r\n    //3. state 내부 변수 stter - this.setState 메소드 호출 - 스프레드연산자\r\n    add=() => {\r\n        //this.board.push({seq:6, title:\"제목6\", writer:\"작성자6\"});\r\n\r\n        const copyBoard = [...this.state.board, {seq:this.state.board.length +1, title:\"제목\", writer:\"작성자\"}];\r\n        //...은 카피본을 만드는 스프레드 연산자\r\n        // -> 기존 데이터 가져오고 , 뒤에 추가할 데이터\r\n        this.setState({board : copyBoard});\r\n        \r\n        console.log(this.state.board.length);\r\n    }\r\n\r\n    //화면 구성 1번 호출\r\n    //2. state 사용\r\n    render(){\r\n\r\n        return (<div><table><BoardHeading /><BoardRow board={this.state.board} />\r\n        </table><hr /><button onClick={this.add}>글추가</button>\r\n        <BoardWriteForm board={this.state.board} />\r\n        </div>);\r\n    }\r\n} */\r\n\r\n\r\n\r\nclass BoardList extends React.Component{\r\n    //1. state 변수 선언\r\n    state ={\r\n        board : [\r\n        {seq:1, title:\"제목1\", writer:\"작성자1\"},\r\n        {seq:2, title:\"제목2\", writer:\"작성자2\"},\r\n        {seq:3, title:\"제목3\", writer:\"작성자3\"},\r\n        {seq:4, title:\"제목4\", writer:\"작성자4\"},\r\n        {seq:5, title:\"제목5\", writer:\"작성자5\"}\r\n        ]\r\n    };\r\n    \r\n\r\n    //BOARD 1개 게시물 추가 메소드 정의\r\n    //3. state 내부 변수 stter - this.setState 메소드 호출 - 스프레드연산자\r\n    addBoard=(newBoard) => {\r\n        const copyBoard = [...this.state.board, newBoard];\r\n        this.setState({board : copyBoard});\r\n        \r\n        console.log(this.state.board.length);\r\n    }\r\n\r\n    deleteBoard = (seq) => {\r\n        //보드 배열에서 해당 게시물 삭제\r\n        this.setState({ board : this.state.board.filter(function(one){return one.seq != seq})} ); //삭제한것만 빼고 가져와\r\n    }\r\n\r\n    updateBoard = (oneBoard) => {\r\n        //board 배열에서 oneBoard.seq와 같은 데이터 찾아서 수정\r\n        this.setState({ board :this.state.board.map( (one) => {\r\n            one.seq == oneBoard.seq ? {...this.state.board, title : oneBoard.title, writer : oneBoard.writer} : one}\r\n        )\r\n        }\r\n        );\r\n    }\r\n\r\n    //화면 구성 1번 호출\r\n    //2. state 사용\r\n    render(){\r\n\r\n        return (\r\n        <div>\r\n            <table><BoardHeading />\r\n            <BoardRow board={this.state.board} deleteBoard={this.deleteBoard} updateBoard={this.updateBoard}/>\r\n            </table>\r\n            <hr />\r\n            <BoardWriteForm board={this.state.board} addBoard={this.addBoard} />\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default BoardList;"],"mappings":"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"},"metadata":{},"sourceType":"module"}