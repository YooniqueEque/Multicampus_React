[{"C:\\kdt-venture\\myreact\\src\\index.js":"1","C:\\kdt-venture\\myreact\\src\\App.js":"2","C:\\kdt-venture\\myreact\\src\\reportWebVitals.js":"3","C:\\kdt-venture\\myreact\\src\\ReviewTest.js":"4","C:\\kdt-venture\\myreact\\src\\ReviewTest2.js":"5","C:\\kdt-venture\\myreact\\src\\ReviewTest3.js":"6","C:\\kdt-venture\\myreact\\src\\ReviewTest4.js":"7","C:\\kdt-venture\\myreact\\src\\BoardList.js":"8","C:\\kdt-venture\\myreact\\src\\ArrayTest.js":"9","C:\\kdt-venture\\myreact\\src\\ServerConnection.js":"10","C:\\kdt-venture\\myreact\\src\\App2.js":"11","C:\\kdt-venture\\myreact\\src\\Main.js":"12","C:\\kdt-venture\\myreact\\src\\Board.js":"13","C:\\kdt-venture\\myreact\\src\\NoMatch.js":"14"},{"size":1228,"mtime":1651561627432,"results":"15","hashOfConfig":"16"},{"size":568,"mtime":1651453301558,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1651452960139,"results":"18","hashOfConfig":"16"},{"size":1044,"mtime":1651457796311,"results":"19","hashOfConfig":"16"},{"size":583,"mtime":1651459837329,"results":"20","hashOfConfig":"16"},{"size":2235,"mtime":1651471071024,"results":"21","hashOfConfig":"16"},{"size":1478,"mtime":1651474769693,"results":"22","hashOfConfig":"16"},{"size":7586,"mtime":1651546965990,"results":"23","hashOfConfig":"16"},{"size":861,"mtime":1651543246997,"results":"24","hashOfConfig":"16"},{"size":1233,"mtime":1651560837982,"results":"25","hashOfConfig":"16"},{"size":752,"mtime":1651564904460,"results":"26","hashOfConfig":"16"},{"size":534,"mtime":1651565389641,"results":"27","hashOfConfig":"16"},{"size":1072,"mtime":1651565721839,"results":"28","hashOfConfig":"16"},{"size":126,"mtime":1651564576354,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"qxurl1",{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"41"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\kdt-venture\\myreact\\src\\index.js",["77"],[],"C:\\kdt-venture\\myreact\\src\\App.js",["78"],[],"import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n      <h1>리액트 리뷰</h1>\n    </div>\n  );\n}\n\nexport default App;\n",[],"C:\\kdt-venture\\myreact\\src\\reportWebVitals.js",[],[],[],"C:\\kdt-venture\\myreact\\src\\ReviewTest.js",[],[],"C:\\kdt-venture\\myreact\\src\\ReviewTest2.js",[],[],"C:\\kdt-venture\\myreact\\src\\ReviewTest3.js",["79","80"],[],"C:\\kdt-venture\\myreact\\src\\ReviewTest4.js",[],[],[],"C:\\kdt-venture\\myreact\\src\\BoardList.js",["81","82"],[],"import React from \"react\";\r\n\r\nclass BoardHeading extends React.Component{\r\n    //테이블 제목행 - 번호 제목 작성자\r\n    render(){\r\n       return(\r\n            <thead>\r\n                <tr><th>번호</th><th>제목</th><th>작성자</th><th colSpan={2}>추가동작</th></tr>\r\n            </thead>\r\n        );\r\n    }\r\n}\r\n\r\nclass BoardRow extends React.Component{\r\n    //게시물 갯수만큼 테이블 행 구성\r\n    render(){\r\n        //화살표 함수 : 자신을 포함한 클랙스 객체를 this로 여김\r\n        //일반 함수 : this = 이벤트 발생객체\r\n        const deleteBoard = (event) => {\r\n            //alert(\"삭제\");\r\n            //삭제버튼 클릭한 게시물의 번호 받아서 (this.props.deleteBoard()) 호출 전달\r\n\r\n            this.props.deleteBoard(event.target.id);\r\n\r\n        }\r\n\r\n        const updateBoard = (event) => {\r\n            //alert(\"수정\");\r\n            //수정버튼 클릭한 게시물의 번호 받아서 전달\r\n            const oneBoard = {seq : event.target.id, title:\"수정제목\", writer:\"수정작성자\"};\r\n            this.props.updateBoard(oneBoard);\r\n        }\r\n\r\n        const tr_tag = this.props.board.map(function(one){\r\n            //반복하면서 계속 리턴할 문장\r\n            return (\r\n                <tr key={one.seq}>\r\n                    <td>{one.seq}</td><td>{one.title}</td><td>{one.writer}</td>\r\n                    <td><button id={one.seq} onClick={updateBoard}>수정</button></td>\r\n                    <td><button id={one.seq} onClick={deleteBoard}>삭제</button></td>\r\n                </tr>\r\n            );\r\n        });\r\n\r\n        //반복문이 종료 된 이후 최종적으로 리턴할 문장\r\n        return (<tbody>{tr_tag}</tbody>);\r\n    }\r\n}\r\n\r\nclass BoardWriteForm extends React.Component{\r\n    //props.addBoard 함수를 전달 받은 상태\r\n    render(){\r\n        //글쓰기 버튼 클릭하면 게시물 번호를 현재 게시물 갯수 +1 생성하여 alert로 제목, 작성자, 글번호 띄우기\r\n        const oneboard = {seq : 0, title:\"\", writer:\"\"};\r\n        \r\n        const change = (event) => {\r\n            //if(event.target.id === \"title\") oneboard.title = event.target.value;\r\n            //if(event.target.id === \"writer\") oneboard.writer = event.target.value;\r\n            oneboard[event.target.id] = event.target.value;\r\n        }\r\n\r\n        const finalChange = () => {\r\n            oneboard.seq = this.props.board.length +1;\r\n            alert(oneboard.seq + \" : \" + oneboard.title + \" : \" + oneboard.writer);\r\n            this.props.addBoard(oneboard);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                게시물 제목 : <input type=\"text\" id=\"title\" onChange={change}/> <br/>\r\n                게시물 작성자 : <input type=\"text\" id=\"writer\" onChange={change}/> <br/>\r\n                <button id=\"btn\" onClick={finalChange} >글쓰기</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n//지역변수로 board 선언\r\n/* class BoardList extends React.Component{\r\n    render(){\r\n        const board = [\r\n            {seq:1, title:\"제목1\", writer:\"작성자1\"},\r\n            {seq:2, title:\"제목2\", writer:\"작성자2\"},\r\n            {seq:3, title:\"제목3\", writer:\"작성자3\"},\r\n            {seq:4, title:\"제목4\", writer:\"작성자4\"},\r\n            {seq:5, title:\"제목5\", writer:\"작성자5\"}\r\n        ];\r\n\r\n        return (<div><table><BoardHeading /><BoardRow board={board} />\r\n        </table><hr /><BoardWriteForm board={board} /></div>);\r\n    }\r\n} */\r\n\r\n\r\n\r\n\r\n// class BoardList extends React.Component{\r\n/*         board = [\r\n            {seq:1, title:\"제목1\", writer:\"작성자1\"},\r\n            {seq:2, title:\"제목2\", writer:\"작성자2\"},\r\n            {seq:3, title:\"제목3\", writer:\"작성자3\"},\r\n            {seq:4, title:\"제목4\", writer:\"작성자4\"},\r\n            {seq:5, title:\"제목5\", writer:\"작성자5\"}\r\n        ];\r\n\r\n        //BOARD 1개 게시물 추가 메소드 정의\r\n        add=() => {\r\n            this.board.push({seq:6, title:\"제목6\", writer:\"작성자6\"});\r\n            console.log(this.board.length);\r\n        }\r\n\r\n    //화면 구성 1번 호출\r\n    render(){\r\n\r\n        return (<div><table><BoardHeading /><BoardRow board={this.board} />\r\n        </table><hr /><button onClick={this.add}>글추가</button>\r\n        <BoardWriteForm board={this.board} />\r\n        </div>);\r\n    }\r\n} */\r\n\r\n\r\n\r\n\r\n//state 사용 -> state 지정 변수값 변경 시마다 render 재호출\r\n/* class BoardList extends React.Component{\r\n    //1. state 변수 선언\r\n    state ={\r\n        board : [\r\n        {seq:1, title:\"제목1\", writer:\"작성자1\"},\r\n        {seq:2, title:\"제목2\", writer:\"작성자2\"},\r\n        {seq:3, title:\"제목3\", writer:\"작성자3\"},\r\n        {seq:4, title:\"제목4\", writer:\"작성자4\"},\r\n        {seq:5, title:\"제목5\", writer:\"작성자5\"}\r\n        ]\r\n    };\r\n    \r\n\r\n    //BOARD 1개 게시물 추가 메소드 정의\r\n    //3. state 내부 변수 stter - this.setState 메소드 호출 - 스프레드연산자\r\n    add=() => {\r\n        //this.board.push({seq:6, title:\"제목6\", writer:\"작성자6\"});\r\n\r\n        const copyBoard = [...this.state.board, {seq:this.state.board.length +1, title:\"제목\", writer:\"작성자\"}];\r\n        //...은 카피본을 만드는 스프레드 연산자\r\n        // -> 기존 데이터 가져오고 , 뒤에 추가할 데이터\r\n        this.setState({board : copyBoard});\r\n        \r\n        console.log(this.state.board.length);\r\n    }\r\n\r\n    //화면 구성 1번 호출\r\n    //2. state 사용\r\n    render(){\r\n\r\n        return (<div><table><BoardHeading /><BoardRow board={this.state.board} />\r\n        </table><hr /><button onClick={this.add}>글추가</button>\r\n        <BoardWriteForm board={this.state.board} />\r\n        </div>);\r\n    }\r\n} */\r\n\r\n\r\n\r\nclass BoardList extends React.Component{\r\n    //1. state 변수 선언\r\n    state ={\r\n        board : [\r\n        {seq:1, title:\"제목1\", writer:\"작성자1\"},\r\n        {seq:2, title:\"제목2\", writer:\"작성자2\"},\r\n        {seq:3, title:\"제목3\", writer:\"작성자3\"},\r\n        {seq:4, title:\"제목4\", writer:\"작성자4\"},\r\n        {seq:5, title:\"제목5\", writer:\"작성자5\"}\r\n        ]\r\n    };\r\n    \r\n\r\n    //BOARD 1개 게시물 추가 메소드 정의\r\n    //3. state 내부 변수 stter - this.setState 메소드 호출 - 스프레드연산자\r\n    addBoard=(newBoard) => {\r\n        const copyBoard = [...this.state.board, newBoard];\r\n        this.setState({board : copyBoard});\r\n        \r\n        console.log(this.state.board.length);\r\n    }\r\n\r\n    deleteBoard = (seq) => {\r\n        //보드 배열에서 해당 게시물 삭제\r\n        this.setState({ board : this.state.board.filter(function(one){return one.seq != seq})} ); //삭제한것만 빼고 가져와\r\n    }\r\n\r\n    updateBoard = (oneBoard) => {\r\n        //board 배열에서 oneBoard.seq와 같은 데이터 찾아서 수정\r\n        this.setState({ board :this.state.board.map( (one) => \r\n            one.seq == oneBoard.seq ? {...this.state.board, seq: oneBoard.seq , title : oneBoard.title, writer : oneBoard.writer} : one )} );\r\n    }\r\n\r\n    //화면 구성 1번 호출\r\n    //2. state 사용\r\n    render(){\r\n\r\n        return (\r\n        <div>\r\n            <table><BoardHeading />\r\n            <BoardRow board={this.state.board} deleteBoard={this.deleteBoard} updateBoard={this.updateBoard}/>\r\n            </table>\r\n            <hr />\r\n            <BoardWriteForm board={this.state.board} addBoard={this.addBoard} />\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default BoardList;","C:\\kdt-venture\\myreact\\src\\ArrayTest.js",[],[],"C:\\kdt-venture\\myreact\\src\\ServerConnection.js",[],[],"C:\\kdt-venture\\myreact\\src\\App2.js",[],[],"C:\\kdt-venture\\myreact\\src\\Main.js",[],[],"C:\\kdt-venture\\myreact\\src\\Board.js",[],[],"C:\\kdt-venture\\myreact\\src\\NoMatch.js",[],[],{"ruleId":"83","severity":1,"message":"84","line":16,"column":3,"nodeType":"85","messageId":"86","endLine":30,"endColumn":25},{"ruleId":"87","severity":1,"message":"88","line":1,"column":8,"nodeType":"89","messageId":"90","endLine":1,"endColumn":12},{"ruleId":"91","severity":1,"message":"92","line":40,"column":5,"nodeType":"93","messageId":"94","endLine":42,"endColumn":6},{"ruleId":"91","severity":1,"message":"92","line":58,"column":5,"nodeType":"93","messageId":"94","endLine":60,"endColumn":6},{"ruleId":"95","severity":1,"message":"96","line":191,"column":86,"nodeType":"97","messageId":"98","endLine":191,"endColumn":88},{"ruleId":"95","severity":1,"message":"99","line":197,"column":21,"nodeType":"97","messageId":"98","endLine":197,"endColumn":23},"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='."]